(=(list-multiply $property1values $property2values $properties)(
    collapse(
        superpose(
            ((index-atom $properties 0) (* (index-atom $property1values 0) (index-atom $property2values 0)))
            ((index-atom $properties 1) (* (index-atom $property1values 1) (index-atom $property2values 1)))
            ((index-atom $properties 2) (* (index-atom $property1values 2) (index-atom $property2values 2)))
            ((index-atom $properties 3) (* (index-atom $property1values 3) (index-atom $property2values 3)))
            ((index-atom $properties 4) (* (index-atom $property1values 4) (index-atom $property2values 4)))
            ((index-atom $properties 5) (* (index-atom $property1values 5) (index-atom $property2values 5)))
            ((index-atom $properties 6) (* (index-atom $property1values 6) (index-atom $property2values 6)))
            ((index-atom $properties 7) (* (index-atom $property1values 7) (index-atom $property2values 7)))
            ((index-atom $properties 8) (* (index-atom $property1values 8) (index-atom $property2values 8)))
            ((index-atom $properties 9) (* (index-atom $property1values 9) (index-atom $property2values 9)))
            ((index-atom $properties 10) (* (index-atom $property1values 10) (index-atom $property2values 10)))
            ((index-atom $properties 11) (* (index-atom $property1values 11) (index-atom $property2values 11)))
            ((index-atom $properties 12) (* (index-atom $property1values 12) (index-atom $property2values 12)))
            ((index-atom $properties 13) (* (index-atom $property1values 13) (index-atom $property2values 13)))
            ((index-atom $properties 14) (* (index-atom $property1values 14) (index-atom $property2values 14)))
            ((index-atom $properties 15) (* (index-atom $property1values 15) (index-atom $property2values 15)))
            ((index-atom $properties 16) (* (index-atom $property1values 16) (index-atom $property2values 16)))
            ((index-atom $properties 17) (* (index-atom $property1values 17) (index-atom $property2values 17)))
            ((index-atom $properties 18) (* (index-atom $property1values 18) (index-atom $property2values 18)))
            ((index-atom $properties 18) (* (index-atom $property1values 18) (index-atom $property2values 18)))
            ((index-atom $properties 19) (* (index-atom $property1values 19) (index-atom $property2values 19)))
            ((index-atom $properties 20) (* (index-atom $property1values 20) (index-atom $property2values 20)))
            ((index-atom $properties 21) (* (index-atom $property1values 21) (index-atom $property2values 21)))
            ((index-atom $properties 22) (* (index-atom $property1values 22) (index-atom $property2values 22)))
            ((index-atom $properties 23) (* (index-atom $property1values 23) (index-atom $property2values 23)))
            ((index-atom $properties 24) (* (index-atom $property1values 24) (index-atom $property2values 24)))
            ((index-atom $properties 25) (* (index-atom $property1values 25) (index-atom $property2values 25)))
            )            
        )
    )
)

(=(min-elements $property1values $property2values $properties)(
    collapse(
        superpose(
            ((index-atom $properties 0) (let* (($num1 (index-atom $property1values 0)) ($num2 (index-atom $property2values 0)))(min-atom ($num1 $num2))))
            ((index-atom $properties 1) (let* (($num1 (index-atom $property1values 1)) ($num2 (index-atom $property2values 1)))(min-atom ($num1 $num2))))
            ((index-atom $properties 2) (let* (($num1 (index-atom $property1values 2)) ($num2 (index-atom $property2values 2)))(min-atom ($num1 $num2))))
            ((index-atom $properties 3) (let* (($num1 (index-atom $property1values 3)) ($num2 (index-atom $property2values 3)))(min-atom ($num1 $num2))))
            ((index-atom $properties 4) (let* (($num1 (index-atom $property1values 4)) ($num2 (index-atom $property2values 4)))(min-atom ($num1 $num2))))
            ((index-atom $properties 5) (let* (($num1 (index-atom $property1values 5)) ($num2 (index-atom $property2values 5)))(min-atom ($num1 $num2))))
            ((index-atom $properties 6) (let* (($num1 (index-atom $property1values 6)) ($num2 (index-atom $property2values 6)))(min-atom ($num1 $num2))))
            ((index-atom $properties 7) (let* (($num1 (index-atom $property1values 7)) ($num2 (index-atom $property2values 7)))(min-atom ($num1 $num2))))
            ((index-atom $properties 8) (let* (($num1 (index-atom $property1values 8)) ($num2 (index-atom $property2values 8)))(min-atom ($num1 $num2))))
            ((index-atom $properties 9) (let* (($num1 (index-atom $property1values 9)) ($num2 (index-atom $property2values 9)))(min-atom ($num1 $num2))))
            ((index-atom $properties 10) (let* (($num1 (index-atom $property1values 10)) ($num2 (index-atom $property2values 10)))(min-atom ($num1 $num2))))
            ((index-atom $properties 11) (let* (($num1 (index-atom $property1values 11)) ($num2 (index-atom $property2values 11)))(min-atom ($num1 $num2))))
            ((index-atom $properties 12) (let* (($num1 (index-atom $property1values 12)) ($num2 (index-atom $property2values 12)))(min-atom ($num1 $num2))))
            ((index-atom $properties 13) (let* (($num1 (index-atom $property1values 13)) ($num2 (index-atom $property2values 13)))(min-atom ($num1 $num2))))
            ((index-atom $properties 14) (let* (($num1 (index-atom $property1values 14)) ($num2 (index-atom $property2values 14)))(min-atom ($num1 $num2))))
            ((index-atom $properties 15) (let* (($num1 (index-atom $property1values 15)) ($num2 (index-atom $property2values 15)))(min-atom ($num1 $num2))))
            ((index-atom $properties 16) (let* (($num1 (index-atom $property1values 16)) ($num2 (index-atom $property2values 16)))(min-atom ($num1 $num2))))
            ((index-atom $properties 17) (let* (($num1 (index-atom $property1values 17)) ($num2 (index-atom $property2values 17)))(min-atom ($num1 $num2))))
            ((index-atom $properties 18) (let* (($num1 (index-atom $property1values 18)) ($num2 (index-atom $property2values 18)))(min-atom ($num1 $num2))))
            ((index-atom $properties 19) (let* (($num1 (index-atom $property1values 19)) ($num2 (index-atom $property2values 19)))(min-atom ($num1 $num2))))
            ((index-atom $properties 20) (let* (($num1 (index-atom $property1values 20)) ($num2 (index-atom $property2values 20)))(min-atom ($num1 $num2))))
            ((index-atom $properties 21) (let* (($num1 (index-atom $property1values 21)) ($num2 (index-atom $property2values 21)))(min-atom ($num1 $num2))))
            ((index-atom $properties 22) (let* (($num1 (index-atom $property1values 22)) ($num2 (index-atom $property2values 22)))(min-atom ($num1 $num2))))
            ((index-atom $properties 23) (let* (($num1 (index-atom $property1values 23)) ($num2 (index-atom $property2values 23)))(min-atom ($num1 $num2))))
            ((index-atom $properties 24) (let* (($num1 (index-atom $property1values 24)) ($num2 (index-atom $property2values 24)))(min-atom ($num1 $num2))))
            ((index-atom $properties 25) (let* (($num1 (index-atom $property1values 25)) ($num2 (index-atom $property2values 25)))(min-atom ($num1 $num2))))
            )            
        )
    )
)

(=(max-elements $property1values $property2values $properties)(
    collapse(
        superpose(
            ((index-atom $properties 0) (let* (($num1 (index-atom $property1values 0)) ($num2 (index-atom $property2values 0)))(max-atom ($num1 $num2))))
            ((index-atom $properties 1) (let* (($num1 (index-atom $property1values 1)) ($num2 (index-atom $property2values 1)))(max-atom ($num1 $num2))))
            ((index-atom $properties 2) (let* (($num1 (index-atom $property1values 2)) ($num2 (index-atom $property2values 2)))(max-atom ($num1 $num2))))
            ((index-atom $properties 3) (let* (($num1 (index-atom $property1values 3)) ($num2 (index-atom $property2values 3)))(max-atom ($num1 $num2))))
            ((index-atom $properties 4) (let* (($num1 (index-atom $property1values 4)) ($num2 (index-atom $property2values 4)))(max-atom ($num1 $num2))))
            ((index-atom $properties 5) (let* (($num1 (index-atom $property1values 5)) ($num2 (index-atom $property2values 5)))(max-atom ($num1 $num2))))
            ((index-atom $properties 6) (let* (($num1 (index-atom $property1values 6)) ($num2 (index-atom $property2values 6)))(max-atom ($num1 $num2))))
            ((index-atom $properties 7) (let* (($num1 (index-atom $property1values 7)) ($num2 (index-atom $property2values 7)))(max-atom ($num1 $num2))))
            ((index-atom $properties 8) (let* (($num1 (index-atom $property1values 8)) ($num2 (index-atom $property2values 8)))(max-atom ($num1 $num2))))
            ((index-atom $properties 9) (let* (($num1 (index-atom $property1values 9)) ($num2 (index-atom $property2values 9)))(max-atom ($num1 $num2))))
            ((index-atom $properties 10) (let* (($num1 (index-atom $property1values 10)) ($num2 (index-atom $property2values 10)))(max-atom ($num1 $num2))))
            ((index-atom $properties 11) (let* (($num1 (index-atom $property1values 11)) ($num2 (index-atom $property2values 11)))(max-atom ($num1 $num2))))
            ((index-atom $properties 12) (let* (($num1 (index-atom $property1values 12)) ($num2 (index-atom $property2values 12)))(max-atom ($num1 $num2))))
            ((index-atom $properties 13) (let* (($num1 (index-atom $property1values 13)) ($num2 (index-atom $property2values 13)))(max-atom ($num1 $num2))))
            ((index-atom $properties 14) (let* (($num1 (index-atom $property1values 14)) ($num2 (index-atom $property2values 14)))(max-atom ($num1 $num2))))
            ((index-atom $properties 15) (let* (($num1 (index-atom $property1values 15)) ($num2 (index-atom $property2values 15)))(max-atom ($num1 $num2))))
            ((index-atom $properties 16) (let* (($num1 (index-atom $property1values 16)) ($num2 (index-atom $property2values 16)))(max-atom ($num1 $num2))))
            ((index-atom $properties 17) (let* (($num1 (index-atom $property1values 17)) ($num2 (index-atom $property2values 17)))(max-atom ($num1 $num2))))
            ((index-atom $properties 18) (let* (($num1 (index-atom $property1values 18)) ($num2 (index-atom $property2values 18)))(max-atom ($num1 $num2))))
            ((index-atom $properties 19) (let* (($num1 (index-atom $property1values 19)) ($num2 (index-atom $property2values 19)))(max-atom ($num1 $num2))))
            ((index-atom $properties 20) (let* (($num1 (index-atom $property1values 20)) ($num2 (index-atom $property2values 20)))(max-atom ($num1 $num2))))
            ((index-atom $properties 21) (let* (($num1 (index-atom $property1values 21)) ($num2 (index-atom $property2values 21)))(max-atom ($num1 $num2))))
            ((index-atom $properties 22) (let* (($num1 (index-atom $property1values 22)) ($num2 (index-atom $property2values 22)))(max-atom ($num1 $num2))))
            ((index-atom $properties 23) (let* (($num1 (index-atom $property1values 23)) ($num2 (index-atom $property2values 23)))(max-atom ($num1 $num2))))
            ((index-atom $properties 24) (let* (($num1 (index-atom $property1values 24)) ($num2 (index-atom $property2values 24)))(max-atom ($num1 $num2))))
            ((index-atom $properties 25) (let* (($num1 (index-atom $property1values 25)) ($num2 (index-atom $property2values 25)))(max-atom ($num1 $num2))))
            )            
        )
    )
)

(=(list-substract $candidatedegreeval $propertiesvalues $properties)
    (collapse(
        superpose(
            ((index-atom $properties 0) (let $num (chain (- (index-atom $candidatedegreeval 0) (index-atom $propertiesvalues 0)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 1) (let $num (chain (- (index-atom $candidatedegreeval 1) (index-atom $propertiesvalues 1)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 2) (let $num (chain (- (index-atom $candidatedegreeval 2) (index-atom $propertiesvalues 2)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 3) (let $num (chain (- (index-atom $candidatedegreeval 3) (index-atom $propertiesvalues 3)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 4) (let $num (chain (- (index-atom $candidatedegreeval 4) (index-atom $propertiesvalues 4)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 5) (let $num (chain (- (index-atom $candidatedegreeval 5) (index-atom $propertiesvalues 5)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 6) (let $num (chain (- (index-atom $candidatedegreeval 6) (index-atom $propertiesvalues 6)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 7) (let $num (chain (- (index-atom $candidatedegreeval 7) (index-atom $propertiesvalues 7)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 8) (let $num (chain (- (index-atom $candidatedegreeval 8) (index-atom $propertiesvalues 8)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 9) (let $num (chain (- (index-atom $candidatedegreeval 9) (index-atom $propertiesvalues 9)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 10) (let $num (chain (- (index-atom $candidatedegreeval 10) (index-atom $propertiesvalues 10)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 11) (let $num (chain (- (index-atom $candidatedegreeval 11) (index-atom $propertiesvalues 11)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 12) (let $num (chain (- (index-atom $candidatedegreeval 12) (index-atom $propertiesvalues 12)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 13) (let $num (chain (- (index-atom $candidatedegreeval 13) (index-atom $propertiesvalues 13)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 14) (let $num (chain (- (index-atom $candidatedegreeval 14) (index-atom $propertiesvalues 14)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 15) (let $num (chain (- (index-atom $candidatedegreeval 15) (index-atom $propertiesvalues 15)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 16) (let $num (chain (- (index-atom $candidatedegreeval 16) (index-atom $propertiesvalues 16)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 17) (let $num (chain (- (index-atom $candidatedegreeval 17) (index-atom $propertiesvalues 17)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 18) (let $num (chain (- (index-atom $candidatedegreeval 18) (index-atom $propertiesvalues 18)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 19) (let $num (chain (- (index-atom $candidatedegreeval 19) (index-atom $propertiesvalues 19)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 20) (let $num (chain (- (index-atom $candidatedegreeval 20) (index-atom $propertiesvalues 20)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 21) (let $num (chain (- (index-atom $candidatedegreeval 21) (index-atom $propertiesvalues 21)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 22) (let $num (chain (- (index-atom $candidatedegreeval 22) (index-atom $propertiesvalues 22)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 23) (let $num (chain (- (index-atom $candidatedegreeval 23) (index-atom $propertiesvalues 23)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 24) (let $num (chain (- (index-atom $candidatedegreeval 24) (index-atom $propertiesvalues 24)) $x $x) (max-atom ($num 0))))
            ((index-atom $properties 25) (let $num (chain (- (index-atom $candidatedegreeval 25) (index-atom $propertiesvalues 25)) $x $x) (max-atom ($num 0))))
            )
        )
    )
)

(= (zip-list $list1 $list2)
    (
        if (or (== (size-atom $list1) 0) (== (size-atom $list2) 0))
        (Error (zip-list $list1 $list2) EmptyList)
            (if (not (== (size-atom $list1) (size-atom $list2)))
            (Error (zip-list $list1 $list2) LengthMismatch)
            (collapse(
                superpose(
                    ((index-atom $list1 0) (index-atom $list2 0))
                    ((index-atom $list1 1) (index-atom $list2 1))
                    ((index-atom $list1 2) (index-atom $list2 2))
                    ((index-atom $list1 3) (index-atom $list2 3))
                    ((index-atom $list1 4) (index-atom $list2 4))
                    ((index-atom $list1 5) (index-atom $list2 5))
                    ((index-atom $list1 6) (index-atom $list2 6))
                    ((index-atom $list1 7) (index-atom $list2 7))
                    ((index-atom $list1 8) (index-atom $list2 8))
                    ((index-atom $list1 9) (index-atom $list2 9))
                    ((index-atom $list1 10) (index-atom $list2 10))
                    ((index-atom $list1 11) (index-atom $list2 11))
                    ((index-atom $list1 12) (index-atom $list2 12))
                    ((index-atom $list1 13) (index-atom $list2 13))
                    ((index-atom $list1 14) (index-atom $list2 14))
                    ((index-atom $list1 15) (index-atom $list2 15))
                    ((index-atom $list1 16) (index-atom $list2 16))
                    ((index-atom $list1 17) (index-atom $list2 17))
                    ((index-atom $list1 18) (index-atom $list2 18))
                    ((index-atom $list1 19) (index-atom $list2 19))
                    ((index-atom $list1 20) (index-atom $list2 20))
                    ((index-atom $list1 21) (index-atom $list2 21))
                    ((index-atom $list1 22) (index-atom $list2 22))
                    ((index-atom $list1 23) (index-atom $list2 23))
                    ((index-atom $list1 24) (index-atom $list2 24))
                    ((index-atom $list1 25) (index-atom $list2 25))
                    ((index-atom $list1 26) (index-atom $list2 26))
                    ((index-atom $list1 27) (index-atom $list2 27))
                    ((index-atom $list1 28) (index-atom $list2 28))
                    ((index-atom $list1 29) (index-atom $list2 29))
                    ((index-atom $list1 30) (index-atom $list2 30))
                    ((index-atom $list1 31) (index-atom $list2 31))
                    ((index-atom $list1 32) (index-atom $list2 32))
                    ((index-atom $list1 33) (index-atom $list2 33))
                    ((index-atom $list1 34) (index-atom $list2 34))
                    ((index-atom $list1 35) (index-atom $list2 35))
                    ((index-atom $list1 36) (index-atom $list2 36))
                    ((index-atom $list1 37) (index-atom $list2 37))
                    ((index-atom $list1 38) (index-atom $list2 38))
                    ((index-atom $list1 39) (index-atom $list2 39))
                    ((index-atom $list1 40) (index-atom $list2 40))
                    ((index-atom $list1 41) (index-atom $list2 41))
                    ((index-atom $list1 42) (index-atom $list2 42))
                    ((index-atom $list1 43) (index-atom $list2 43))
                    ((index-atom $list1 44) (index-atom $list2 44))
                    ((index-atom $list1 45) (index-atom $list2 45))
                    ((index-atom $list1 46) (index-atom $list2 46))
                    ((index-atom $list1 47) (index-atom $list2 47))
                    ((index-atom $list1 48) (index-atom $list2 48))
                    ((index-atom $list1 49) (index-atom $list2 49))
                    ((index-atom $list1 50) (index-atom $list2 50))
                    )
                )
            )
        )
    )
)

(= (compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) $index)
    (let (($prop1 $prop1val) ($prop2 $prop2val)) ((index-atom $concept1props $index) (index-atom $concept2props $index)) (if (>= $prop1val $prop2val) ($input1 $prop1 $prop1val) ($input2 $prop2 $prop2val)))
)

(= (provenance-helper ($input1 $concept1props) ($input2  $concept2props) ($blend $blendprops))
    (collapse(
        superpose(
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 0) (index-atom $blendprops 0)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 1) (index-atom $blendprops 1)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 2) (index-atom $blendprops 2)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 3) (index-atom $blendprops 3)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 4) (index-atom $blendprops 4)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 5) (index-atom $blendprops 5)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 6) (index-atom $blendprops 6)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))
            (let (($gcn $gcp $gcpv) ($blendprop $blendpropval)) ((compare-concepts-prop-val ($input1 $concept1props) ($input2 $concept2props) 7) (index-atom $blendprops 7)) (if (>= $blendpropval $gcpv) ($blendprop) ($blendprop ($gcn))))                
        )
    ))
)

(= (remove-list-element $list $val)
    (
        if (== (size-atom $list) 0)
        ()
        (
            if (let $max (max-atom $list) (and (== (index-atom $list 0) $max) (== $val $max)))
            (cdr-atom $list)
            (collapse(
                superpose(
                    (let $val0 (index-atom $list 0) (if (== $val0 $val) Empty $val0))
                    (let $val1 (index-atom $list 1) (if (== $val1 $val) Empty $val1))
                    (let $val2 (index-atom $list 2) (if (== $val2 $val) Empty $val2))
                    (let $val3 (index-atom $list 3) (if (== $val3 $val) Empty $val3))
                    (let $val4 (index-atom $list 4) (if (== $val4 $val) Empty $val4))
                    (let $val5 (index-atom $list 5) (if (== $val5 $val) Empty $val5))
                    (let $val6 (index-atom $list 6) (if (== $val6 $val) Empty $val6))
                    (let $val7 (index-atom $list 7) (if (== $val7 $val) Empty $val7))
                    (let $val8 (index-atom $list 8) (if (== $val8 $val) Empty $val8))
                    (let $val9 (index-atom $list 9) (if (== $val9 $val) Empty $val9))
                    (let $val10 (index-atom $list 10) (if (== $val10 $val) Empty $val10))
                    (let $val11 (index-atom $list 11) (if (== $val11 $val) Empty $val11))
                    (let $val12 (index-atom $list 12) (if (== $val12 $val) Empty $val12))
                    (let $val13 (index-atom $list 13) (if (== $val13 $val) Empty $val13))
                    (let $val14 (index-atom $list 14) (if (== $val14 $val) Empty $val14))
                    (let $val15 (index-atom $list 15) (if (== $val15 $val) Empty $val15))
                    (let $val16 (index-atom $list 16) (if (== $val16 $val) Empty $val16))
                    (let $val17 (index-atom $list 17) (if (== $val17 $val) Empty $val17))
                    (let $val18 (index-atom $list 18) (if (== $val18 $val) Empty $val18))
                    (let $val19 (index-atom $list 19) (if (== $val19 $val) Empty $val19))
                    (let $val20 (index-atom $list 20) (if (== $val20 $val) Empty $val20))
                    (let $val21 (index-atom $list 21) (if (== $val21 $val) Empty $val21))
                    (let $val22 (index-atom $list 22) (if (== $val22 $val) Empty $val22))
                    (let $val23 (index-atom $list 23) (if (== $val23 $val) Empty $val23))
                    (let $val24 (index-atom $list 24) (if (== $val24 $val) Empty $val24))
                    (let $val25 (index-atom $list 25) (if (== $val25 $val) Empty $val25))
                    (let $val26 (index-atom $list 26) (if (== $val26 $val) Empty $val26))
                    (let $val27 (index-atom $list 27) (if (== $val27 $val) Empty $val27))
                    (let $val28 (index-atom $list 28) (if (== $val28 $val) Empty $val28))
                    (let $val29 (index-atom $list 29) (if (== $val29 $val) Empty $val29))
                    (let $val30 (index-atom $list 30) (if (== $val30 $val) Empty $val30))
                    (let $val31 (index-atom $list 31) (if (== $val31 $val) Empty $val31))
                    (let $val32 (index-atom $list 32) (if (== $val32 $val) Empty $val32))
                    (let $val33 (index-atom $list 33) (if (== $val33 $val) Empty $val33))
                    (let $val34 (index-atom $list 34) (if (== $val34 $val) Empty $val34))
                    (let $val35 (index-atom $list 35) (if (== $val35 $val) Empty $val35))
                    (let $val36 (index-atom $list 36) (if (== $val36 $val) Empty $val36))
                    (let $val37 (index-atom $list 37) (if (== $val37 $val) Empty $val37))
                    (let $val38 (index-atom $list 38) (if (== $val38 $val) Empty $val38))
                    (let $val39 (index-atom $list 39) (if (== $val39 $val) Empty $val39))
                    (let $val40 (index-atom $list 40) (if (== $val40 $val) Empty $val40))
                    (let $val41 (index-atom $list 41) (if (== $val41 $val) Empty $val41))
                    (let $val42 (index-atom $list 42) (if (== $val42 $val) Empty $val42))
                    (let $val43 (index-atom $list 43) (if (== $val43 $val) Empty $val43))
                    (let $val44 (index-atom $list 44) (if (== $val44 $val) Empty $val44))
                    (let $val45 (index-atom $list 45) (if (== $val45 $val) Empty $val45))
                    (let $val46 (index-atom $list 46) (if (== $val46 $val) Empty $val46))
                    (let $val47 (index-atom $list 47) (if (== $val47 $val) Empty $val47))
                    (let $val48 (index-atom $list 48) (if (== $val48 $val) Empty $val48))
                    (let $val49 (index-atom $list 49) (if (== $val49 $val) Empty $val49))
                    (let $val50 (index-atom $list 50) (if (== $val50 $val) Empty $val50))
                    )
                )
            )
        )
    )
)

(= (add-list-to-space $list $space)
    (
        if (== (size-atom $list) 0)
        (Error $list EmptyList)
        (
            collapse(
                superpose(
                    (add-reduct $space (let $popfitpair (index-atom $list 0) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 1) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 2) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 3) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 4) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 5) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 6) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 7) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 8) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 9) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 10) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 11) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 12) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 13) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 14) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 15) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 16) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 17) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 18) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 19) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 20) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 21) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 22) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 23) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 24) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 25) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 26) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 27) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 28) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 29) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 30) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 31) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 32) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 33) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 34) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 35) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 36) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 37) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 38) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 39) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 40) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 41) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 42) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 43) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 44) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 45) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 46) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 47) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 48) (cons-atom Individual $popfitpair)))
                    (add-reduct $space (let $popfitpair (index-atom $list 49) (cons-atom Individual $popfitpair)))
                )
            )
        )
    )
)

(= (check-all-equal $list $firstelem)
    (
        if (== (size-atom $list) 0)
        True
        (let*
            (
                ($elem (car-atom $list))
                ($list1 (cdr-atom $list))
                ($result (and (== $elem $firstelem) (check-all-equal $list1 $firstelem)))
            )
            $result
        )
    )
)

(= (elite-individuals $list $space $n)
    (
        if (== (size-atom $list) 0)
        (Error $list EmptyList)
        (
            if (let $x (collapse(get-atoms $space)) (== (size-atom $x) 0))
            (Error $space EmptySpace)
            (
                collapse(
                    superpose(
                        (
                            if (>= (- $n 1) 0)
                            (let $max (max-atom $list) (match-single-individual $space $max))
                            Empty
                        )
                        (
                            if (>= (- $n 2) 0)
                            (let $max (max-atom (remove-list-element $list (max-atom $list))) (match-single-individual $space $max))
                            Empty
                        )
                        (
                            if (>= (- $n 3) 0)
                            (let $max (max-atom (remove-list-element (remove-list-element $list (max-atom $list)) (max-atom (remove-list-element $list (max-atom $list))))) (match-single-individual $space $max))
                            Empty
                        )
                    )
                )
            )
        )
    )
)

(= (elite-individuals1 $list $space $n)
    (
        if (<= $n 0) 
        ()
        (let*
        (
            ($max (max-atom $list))
            ($list1 (remove-list-element $list $max))
            ($maxfitindiv (match-single-individual $space $max))
            ($max1 (elite-individuals1 $list1 $space (- $n 1)))
        )
        (cons-atom $maxfitindiv $max1)
        )
    )
)

(= (unzip-list $list)
    (
        if (== (size-atom $list) 0)
        (Error $list EmptyList)
        (collapse(
            superpose(
                (collapse(
                    superpose(
                        (let $x (index-atom $list 0) (index-atom $x 0))
                        (let $x (index-atom $list 1) (index-atom $x 0))
                        (let $x (index-atom $list 2) (index-atom $x 0))
                        (let $x (index-atom $list 3) (index-atom $x 0))
                        (let $x (index-atom $list 4) (index-atom $x 0))
                        (let $x (index-atom $list 5) (index-atom $x 0))
                        (let $x (index-atom $list 6) (index-atom $x 0))
                        (let $x (index-atom $list 7) (index-atom $x 0))
                        (let $x (index-atom $list 8) (index-atom $x 0))
                        (let $x (index-atom $list 9) (index-atom $x 0))
                        (let $x (index-atom $list 10) (index-atom $x 0))
                        (let $x (index-atom $list 11) (index-atom $x 0))
                        (let $x (index-atom $list 12) (index-atom $x 0))
                        (let $x (index-atom $list 13) (index-atom $x 0))
                        (let $x (index-atom $list 14) (index-atom $x 0))
                        (let $x (index-atom $list 15) (index-atom $x 0))
                        (let $x (index-atom $list 16) (index-atom $x 0))
                        (let $x (index-atom $list 17) (index-atom $x 0))
                        (let $x (index-atom $list 18) (index-atom $x 0))
                        (let $x (index-atom $list 19) (index-atom $x 0))
                        (let $x (index-atom $list 20) (index-atom $x 0))
                        (let $x (index-atom $list 21) (index-atom $x 0))
                        (let $x (index-atom $list 22) (index-atom $x 0))
                        (let $x (index-atom $list 23) (index-atom $x 0))
                        (let $x (index-atom $list 24) (index-atom $x 0))
                        (let $x (index-atom $list 25) (index-atom $x 0))
                        )
                    )
                )
                (collapse(
                    superpose(
                        (let $x (index-atom $list 0) (index-atom $x 1))
                        (let $x (index-atom $list 1) (index-atom $x 1))
                        (let $x (index-atom $list 2) (index-atom $x 1))
                        (let $x (index-atom $list 3) (index-atom $x 1))
                        (let $x (index-atom $list 4) (index-atom $x 1))
                        (let $x (index-atom $list 5) (index-atom $x 1))
                        (let $x (index-atom $list 6) (index-atom $x 1))
                        (let $x (index-atom $list 7) (index-atom $x 1))
                        (let $x (index-atom $list 8) (index-atom $x 1))
                        (let $x (index-atom $list 9) (index-atom $x 1))
                        (let $x (index-atom $list 10) (index-atom $x 1))
                        (let $x (index-atom $list 11) (index-atom $x 1))
                        (let $x (index-atom $list 12) (index-atom $x 1))
                        (let $x (index-atom $list 13) (index-atom $x 1))
                        (let $x (index-atom $list 14) (index-atom $x 1))
                        (let $x (index-atom $list 15) (index-atom $x 1))
                        (let $x (index-atom $list 16) (index-atom $x 1))
                        (let $x (index-atom $list 17) (index-atom $x 1))
                        (let $x (index-atom $list 18) (index-atom $x 1))
                        (let $x (index-atom $list 19) (index-atom $x 1))
                        (let $x (index-atom $list 20) (index-atom $x 1))
                        (let $x (index-atom $list 21) (index-atom $x 1))
                        (let $x (index-atom $list 22) (index-atom $x 1))
                        (let $x (index-atom $list 23) (index-atom $x 1))
                        (let $x (index-atom $list 24) (index-atom $x 1))
                        (let $x (index-atom $list 25) (index-atom $x 1))
                        )
                    )
                )
            )
            )
        )
    )
)

(= (generate-toy-list $n)
    (collapse
        (superpose
            (
                (if (>= (- $n 1) 0) 1 Empty)
                (if (>= (- $n 2) 0) 1 Empty)
                (if (>= (- $n 3) 0) 1 Empty)
                (if (>= (- $n 4) 0) 1 Empty)
                (if (>= (- $n 5) 0) 1 Empty)
                (if (>= (- $n 6) 0) 1 Empty)
                (if (>= (- $n 7) 0) 1 Empty)
                (if (>= (- $n 8) 0) 1 Empty)
                (if (>= (- $n 9) 0) 1 Empty)
                (if (>= (- $n 10) 0) 1 Empty)
                (if (>= (- $n 11) 0) 1 Empty)
                (if (>= (- $n 12) 0) 1 Empty)
                (if (>= (- $n 13) 0) 1 Empty)
                (if (>= (- $n 14) 0) 1 Empty)
                (if (>= (- $n 15) 0) 1 Empty)
                (if (>= (- $n 16) 0) 1 Empty)
                (if (>= (- $n 17) 0) 1 Empty)
                (if (>= (- $n 18) 0) 1 Empty)
                (if (>= (- $n 19) 0) 1 Empty)
                (if (>= (- $n 20) 0) 1 Empty)
                (if (>= (- $n 21) 0) 1 Empty)
                (if (>= (- $n 22) 0) 1 Empty)
                (if (>= (- $n 23) 0) 1 Empty)
                (if (>= (- $n 24) 0) 1 Empty)
                (if (>= (- $n 25) 0) 1 Empty)
                (if (>= (- $n 26) 0) 1 Empty)
                (if (>= (- $n 27) 0) 1 Empty)
                (if (>= (- $n 28) 0) 1 Empty)
                (if (>= (- $n 29) 0) 1 Empty)
                (if (>= (- $n 30) 0) 1 Empty)
                (if (>= (- $n 31) 0) 1 Empty)
                (if (>= (- $n 32) 0) 1 Empty)
                (if (>= (- $n 33) 0) 1 Empty)
                (if (>= (- $n 34) 0) 1 Empty)
                (if (>= (- $n 35) 0) 1 Empty)
                (if (>= (- $n 36) 0) 1 Empty)
                (if (>= (- $n 37) 0) 1 Empty)
                (if (>= (- $n 38) 0) 1 Empty)
                (if (>= (- $n 39) 0) 1 Empty)
                (if (>= (- $n 40) 0) 1 Empty)
                (if (>= (- $n 41) 0) 1 Empty)
                (if (>= (- $n 42) 0) 1 Empty)
                (if (>= (- $n 43) 0) 1 Empty)
                (if (>= (- $n 44) 0) 1 Empty)
                (if (>= (- $n 45) 0) 1 Empty)
                (if (>= (- $n 46) 0) 1 Empty)
                (if (>= (- $n 47) 0) 1 Empty)
                (if (>= (- $n 48) 0) 1 Empty)
                (if (>= (- $n 49) 0) 1 Empty)
                (if (>= (- $n 50) 0) 1 Empty)
            )
        )
    )
)

(= (merge-list $list1 $list2)
    (
        if (and (== (size-atom $list1) 0) (== (size-atom $list2) 0))
        ()
        (collapse
            (superpose
                (
                    (index-atom $list1 0)
                    (index-atom $list1 1)
                    (index-atom $list1 2)
                    (index-atom $list1 3)
                    (index-atom $list1 4)
                    (index-atom $list1 5)
                    (index-atom $list1 6)
                    (index-atom $list1 7)
                    (index-atom $list1 8)
                    (index-atom $list1 9)
                    (index-atom $list1 10)
                    (index-atom $list1 11)
                    (index-atom $list1 12)
                    (index-atom $list1 13)
                    (index-atom $list1 14)
                    (index-atom $list1 15)
                    (index-atom $list1 16)
                    (index-atom $list1 17)
                    (index-atom $list1 18)
                    (index-atom $list1 19)
                    (index-atom $list1 20)
                    (index-atom $list1 21)
                    (index-atom $list1 22)
                    (index-atom $list1 23)
                    (index-atom $list1 24)
                    (index-atom $list1 25)
                    (index-atom $list1 26)
                    (index-atom $list1 27)
                    (index-atom $list1 28)
                    (index-atom $list1 29)
                    (index-atom $list1 30)
                    (index-atom $list1 31)
                    (index-atom $list1 32)
                    (index-atom $list1 33)
                    (index-atom $list1 34)
                    (index-atom $list1 35)
                    (index-atom $list1 36)
                    (index-atom $list1 37)
                    (index-atom $list1 38)
                    (index-atom $list1 39)
                    (index-atom $list1 40)
                    (index-atom $list1 41)
                    (index-atom $list1 42)
                    (index-atom $list1 43)
                    (index-atom $list1 44)
                    (index-atom $list1 45)
                    (index-atom $list1 46)
                    (index-atom $list1 47)
                    (index-atom $list1 48)
                    (index-atom $list1 49)
                    (index-atom $list2 0)
                    (index-atom $list2 1)
                    (index-atom $list2 2)
                    (index-atom $list2 3)
                    (index-atom $list2 4)
                    (index-atom $list2 5)
                    (index-atom $list2 6)
                    (index-atom $list2 7)
                    (index-atom $list2 8)
                    (index-atom $list2 9)
                    (index-atom $list2 10)
                    (index-atom $list2 11)
                    (index-atom $list2 12)
                    (index-atom $list2 13)
                    (index-atom $list2 14)
                    (index-atom $list2 15)
                    (index-atom $list2 16)
                    (index-atom $list2 17)
                    (index-atom $list2 18)
                    (index-atom $list2 19)
                    (index-atom $list2 20)
                    (index-atom $list2 21)
                    (index-atom $list2 22)
                    (index-atom $list2 23)
                    (index-atom $list2 24)
                    (index-atom $list2 25)
                    (index-atom $list2 26)
                    (index-atom $list2 27)
                    (index-atom $list2 28)
                    (index-atom $list2 29)
                    (index-atom $list2 30)
                    (index-atom $list2 31)
                    (index-atom $list2 32)
                    (index-atom $list2 33)
                    (index-atom $list2 34)
                    (index-atom $list2 35)
                    (index-atom $list2 36)
                    (index-atom $list2 37)
                    (index-atom $list2 38)
                    (index-atom $list2 39)
                    (index-atom $list2 40)
                    (index-atom $list2 41)
                    (index-atom $list2 42)
                    (index-atom $list2 43)
                    (index-atom $list2 44)
                    (index-atom $list2 45)
                    (index-atom $list2 46)
                    (index-atom $list2 47)
                    (index-atom $list2 48)
                    (index-atom $list2 49)
                )
            )
        )
    )
)
