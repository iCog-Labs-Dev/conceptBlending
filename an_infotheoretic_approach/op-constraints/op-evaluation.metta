; !(import! &self libs)
!(import! &self common-utils)
!(import! &self integration)
!(import! &self good-reason)
!(import! &self metonymy)
!(import! &self topology)
!(import! &self unpacking)
!(import! &self web)

(= (op-evaluater $blend $concept1 $concept2)
    (let*
        (
            (() (println! "Evaluating Integration OP"))
            ($integration-res (integration-op $blend))
            (() (println! (Integrate-OP Result = $integration-res)))
            (() (println! "Evaluating Good-reason OP"))
            ($good-reason-res (good-reason-op $blend))
            (() (println! (Good-Reason-OP Result = $good-reason-res)))
            (() (println! "Evaluating Metonymy OP"))
            ($metonymy-res (metonymy-op $blend))
            (() (println! (Metonymy-OP Result = $metonymy-res)))
            (() (println! "Evaluating Topology OP"))
            ($topology-res (topology-op $blend $concept1 $concept2))
            (() (println! (Topology-OP Result = $topology-res)))
            (() (println! "Evaluating Unpacking OP"))
            ($unpacking-res (unpacking-op $blend))
            (() (println! (Unpacking-OP Result = $unpacking-res)))
            (() (println! "Evaluating Web OP"))
            ($web-res (web-op (cross_mappings) $blend))
            (() (println! (Web-OP Result = $web-res)))
        )
        ($integration-res $good-reason-res $unpacking-res $web-res $topology-res $metonymy-res)
    )
)
